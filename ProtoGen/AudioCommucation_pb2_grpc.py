# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ProtoGen.AudioCommucation_pb2 as AudioCommucation__pb2


class RouterServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPair = channel.unary_unary(
                '/RouterService/GetPair',
                request_serializer=AudioCommucation__pb2.PairInfo.SerializeToString,
                response_deserializer=AudioCommucation__pb2.SessionID.FromString,
                )
        self.SetModel = channel.unary_unary(
                '/RouterService/SetModel',
                request_serializer=AudioCommucation__pb2.StartModelRequest.SerializeToString,
                response_deserializer=AudioCommucation__pb2.StatusResponse.FromString,
                )
        self.P_GetModel = channel.unary_unary(
                '/RouterService/P_GetModel',
                request_serializer=AudioCommucation__pb2.EmptyRequest.SerializeToString,
                response_deserializer=AudioCommucation__pb2.StartModelRequest.FromString,
                )
        self.P_SetModeSuccess = channel.unary_unary(
                '/RouterService/P_SetModeSuccess',
                request_serializer=AudioCommucation__pb2.StatusResponse.SerializeToString,
                response_deserializer=AudioCommucation__pb2.EmptyRequest.FromString,
                )
        self.SendData = channel.stream_stream(
                '/RouterService/SendData',
                request_serializer=AudioCommucation__pb2.AudioData.SerializeToString,
                response_deserializer=AudioCommucation__pb2.RecognitionResult.FromString,
                )
        self.P_GetData = channel.unary_stream(
                '/RouterService/P_GetData',
                request_serializer=AudioCommucation__pb2.GetDataRequest.SerializeToString,
                response_deserializer=AudioCommucation__pb2.AudioData.FromString,
                )
        self.P_SendResult = channel.unary_unary(
                '/RouterService/P_SendResult',
                request_serializer=AudioCommucation__pb2.RecognitionResult.SerializeToString,
                response_deserializer=AudioCommucation__pb2.StatusResponse.FromString,
                )
        self.Close = channel.unary_unary(
                '/RouterService/Close',
                request_serializer=AudioCommucation__pb2.CloseRequest.SerializeToString,
                response_deserializer=AudioCommucation__pb2.StatusResponse.FromString,
                )
        self.P_GetClose = channel.unary_unary(
                '/RouterService/P_GetClose',
                request_serializer=AudioCommucation__pb2.EmptyRequest.SerializeToString,
                response_deserializer=AudioCommucation__pb2.CloseRequest.FromString,
                )
        self.P_SendCloseResult = channel.unary_unary(
                '/RouterService/P_SendCloseResult',
                request_serializer=AudioCommucation__pb2.CloseRequest.SerializeToString,
                response_deserializer=AudioCommucation__pb2.EmptyRequest.FromString,
                )


class RouterServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPair(self, request, context):
        """Pair current sender with service-provider or service-request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetModel(self, request, context):
        """Choose the model to be used
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def P_GetModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def P_SetModeSuccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendData(self, request_iterator, context):
        """client2server stream rpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def P_GetData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def P_SendResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """stream rpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def P_GetClose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def P_SendCloseResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RouterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPair': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPair,
                    request_deserializer=AudioCommucation__pb2.PairInfo.FromString,
                    response_serializer=AudioCommucation__pb2.SessionID.SerializeToString,
            ),
            'SetModel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetModel,
                    request_deserializer=AudioCommucation__pb2.StartModelRequest.FromString,
                    response_serializer=AudioCommucation__pb2.StatusResponse.SerializeToString,
            ),
            'P_GetModel': grpc.unary_unary_rpc_method_handler(
                    servicer.P_GetModel,
                    request_deserializer=AudioCommucation__pb2.EmptyRequest.FromString,
                    response_serializer=AudioCommucation__pb2.StartModelRequest.SerializeToString,
            ),
            'P_SetModeSuccess': grpc.unary_unary_rpc_method_handler(
                    servicer.P_SetModeSuccess,
                    request_deserializer=AudioCommucation__pb2.StatusResponse.FromString,
                    response_serializer=AudioCommucation__pb2.EmptyRequest.SerializeToString,
            ),
            'SendData': grpc.stream_stream_rpc_method_handler(
                    servicer.SendData,
                    request_deserializer=AudioCommucation__pb2.AudioData.FromString,
                    response_serializer=AudioCommucation__pb2.RecognitionResult.SerializeToString,
            ),
            'P_GetData': grpc.unary_stream_rpc_method_handler(
                    servicer.P_GetData,
                    request_deserializer=AudioCommucation__pb2.GetDataRequest.FromString,
                    response_serializer=AudioCommucation__pb2.AudioData.SerializeToString,
            ),
            'P_SendResult': grpc.unary_unary_rpc_method_handler(
                    servicer.P_SendResult,
                    request_deserializer=AudioCommucation__pb2.RecognitionResult.FromString,
                    response_serializer=AudioCommucation__pb2.StatusResponse.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=AudioCommucation__pb2.CloseRequest.FromString,
                    response_serializer=AudioCommucation__pb2.StatusResponse.SerializeToString,
            ),
            'P_GetClose': grpc.unary_unary_rpc_method_handler(
                    servicer.P_GetClose,
                    request_deserializer=AudioCommucation__pb2.EmptyRequest.FromString,
                    response_serializer=AudioCommucation__pb2.CloseRequest.SerializeToString,
            ),
            'P_SendCloseResult': grpc.unary_unary_rpc_method_handler(
                    servicer.P_SendCloseResult,
                    request_deserializer=AudioCommucation__pb2.CloseRequest.FromString,
                    response_serializer=AudioCommucation__pb2.EmptyRequest.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RouterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RouterService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RouterService/GetPair',
            AudioCommucation__pb2.PairInfo.SerializeToString,
            AudioCommucation__pb2.SessionID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RouterService/SetModel',
            AudioCommucation__pb2.StartModelRequest.SerializeToString,
            AudioCommucation__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def P_GetModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RouterService/P_GetModel',
            AudioCommucation__pb2.EmptyRequest.SerializeToString,
            AudioCommucation__pb2.StartModelRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def P_SetModeSuccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RouterService/P_SetModeSuccess',
            AudioCommucation__pb2.StatusResponse.SerializeToString,
            AudioCommucation__pb2.EmptyRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/RouterService/SendData',
            AudioCommucation__pb2.AudioData.SerializeToString,
            AudioCommucation__pb2.RecognitionResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def P_GetData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/RouterService/P_GetData',
            AudioCommucation__pb2.GetDataRequest.SerializeToString,
            AudioCommucation__pb2.AudioData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def P_SendResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RouterService/P_SendResult',
            AudioCommucation__pb2.RecognitionResult.SerializeToString,
            AudioCommucation__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RouterService/Close',
            AudioCommucation__pb2.CloseRequest.SerializeToString,
            AudioCommucation__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def P_GetClose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RouterService/P_GetClose',
            AudioCommucation__pb2.EmptyRequest.SerializeToString,
            AudioCommucation__pb2.CloseRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def P_SendCloseResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RouterService/P_SendCloseResult',
            AudioCommucation__pb2.CloseRequest.SerializeToString,
            AudioCommucation__pb2.EmptyRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
